{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Thomas Mai\\\\git\\\\dig4639-s24-react-xaigaka\\\\labs\\\\unit2\\\\lab10\\\\src\\\\components\\\\Question\\\\index.js\",\n  _this = this;\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { ButtonGroup } from 'react-native-elements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Question = function Question(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var data = route.params.data;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentIndex = _useState2[0],\n    setCurrentIndex = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedAnswers = _useState4[0],\n    setSelectedAnswers = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    userAnswers = _useState6[0],\n    setUserAnswers = _useState6[1];\n  var handleNextQuestion = function handleNextQuestion() {\n    if (currentIndex < data.length - 1) {\n      setUserAnswers([].concat(_toConsumableArray(userAnswers), [selectedAnswer]));\n      setCurrentIndex(currentIndex + 1);\n      setSelectedAnswer(null);\n    } else {\n      setUserAnswers([].concat(_toConsumableArray(userAnswers), [selectedAnswer]));\n      navigation.navigate('Summary', {\n        data: data,\n        userAnswers: userAnswers\n      });\n    }\n  };\n  var handleAnswerSelection = function handleAnswerSelection(index) {\n    var newSelectedAnswers = _toConsumableArray(selectedAnswers);\n    var answerIndex = newSelectedAnswers.indexOf(index);\n    if (answerIndex !== -1) {\n      newSelectedAnswers.splice(answerIndex, 1);\n    } else {\n      newSelectedAnswers.push(index);\n    }\n    setSelectedAnswers(newSelectedAnswers);\n  };\n  var _data$currentIndex = data[currentIndex],\n    prompt = _data$currentIndex.prompt,\n    type = _data$currentIndex.type,\n    choices = _data$currentIndex.choices;\n  return _jsxDEV(View, {\n    children: [_jsxDEV(Text, {\n      children: prompt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, _this), _jsxDEV(ButtonGroup, {\n      onPress: handleAnswerSelection,\n      selectedIndex: selectedAnswer,\n      buttons: choices,\n      containerStyle: {\n        height: 100\n      },\n      testID: \"choices\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, _this), _jsxDEV(Button, {\n      title: \"Next Question\",\n      onPress: handleNextQuestion,\n      testID: \"next-question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, _this);\n};\nexport default Question;","map":{"version":3,"names":["React","useState","View","Text","Button","ButtonGroup","jsxDEV","_jsxDEV","Question","_ref","route","navigation","data","params","_useState","_useState2","_slicedToArray","currentIndex","setCurrentIndex","_useState3","_useState4","selectedAnswers","setSelectedAnswers","_useState5","_useState6","userAnswers","setUserAnswers","handleNextQuestion","length","concat","_toConsumableArray","selectedAnswer","setSelectedAnswer","navigate","handleAnswerSelection","index","newSelectedAnswers","answerIndex","indexOf","splice","push","_data$currentIndex","prompt","type","choices","children","fileName","_jsxFileName","lineNumber","columnNumber","_this","onPress","selectedIndex","buttons","containerStyle","height","testID","title"],"sources":["C:/Users/Thomas Mai/git/dig4639-s24-react-xaigaka/labs/unit2/lab10/src/components/Question/index.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, Button } from 'react-native';\r\nimport { ButtonGroup } from 'react-native-elements';\r\n\r\nconst Question = ({ route, navigation }) => {\r\n  const { data } = route.params;\r\n\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\r\n  const [userAnswers, setUserAnswers] = useState([]);\r\n\r\n  const handleNextQuestion = () => {\r\n    if (currentIndex < data.length - 1) {\r\n      setUserAnswers([...userAnswers, selectedAnswer]);\r\n      setCurrentIndex(currentIndex + 1);\r\n      setSelectedAnswer(null);\r\n    } else {\r\n      setUserAnswers([...userAnswers, selectedAnswer]);\r\n      navigation.navigate('Summary', { data, userAnswers });\r\n    }\r\n  };\r\n\r\n  const handleAnswerSelection = (index) => {\r\n    const newSelectedAnswers = [...selectedAnswers];\r\n    const answerIndex = newSelectedAnswers.indexOf(index);\r\n    if (answerIndex !== -1) {\r\n      newSelectedAnswers.splice(answerIndex, 1);\r\n    } else {\r\n      newSelectedAnswers.push(index);\r\n    }\r\n    setSelectedAnswers(newSelectedAnswers);\r\n  };\r\n\r\n  const { prompt, type, choices } = data[currentIndex];\r\n\r\n  return (\r\n    <View>\r\n      <Text>{prompt}</Text>\r\n      <ButtonGroup\r\n        onPress={handleAnswerSelection}\r\n        selectedIndex={selectedAnswer}\r\n        buttons={choices}\r\n        containerStyle={{ height: 100 }}\r\n        testID=\"choices\"\r\n      />\r\n      <Button title=\"Next Question\" onPress={handleNextQuestion} testID=\"next-question\" />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Question;"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,MAAA;AAExC,SAASC,WAAW,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAAC,IAAA,EAA8B;EAAA,IAAxBC,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,UAAU,GAAAF,IAAA,CAAVE,UAAU;EACnC,IAAQC,IAAI,GAAKF,KAAK,CAACG,MAAM,CAArBD,IAAI;EAEZ,IAAAE,SAAA,GAAwCb,QAAQ,CAAC,CAAC,CAAC;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA5CG,YAAY,GAAAF,UAAA;IAAEG,eAAe,GAAAH,UAAA;EACpC,IAAAI,UAAA,GAA8ClB,QAAQ,CAAC,EAAE,CAAC;IAAAmB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAnDE,eAAe,GAAAD,UAAA;IAAEE,kBAAkB,GAAAF,UAAA;EAC1C,IAAAG,UAAA,GAAsCtB,QAAQ,CAAC,EAAE,CAAC;IAAAuB,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAA3CE,WAAW,GAAAD,UAAA;IAAEE,cAAc,GAAAF,UAAA;EAElC,IAAMG,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;IAC/B,IAAIV,YAAY,GAAGL,IAAI,CAACgB,MAAM,GAAG,CAAC,EAAE;MAClCF,cAAc,IAAAG,MAAA,CAAAC,kBAAA,CAAKL,WAAW,IAAEM,cAAc,EAAC,CAAC;MAChDb,eAAe,CAACD,YAAY,GAAG,CAAC,CAAC;MACjCe,iBAAiB,CAAC,IAAI,CAAC;IACzB,CAAC,MAAM;MACLN,cAAc,IAAAG,MAAA,CAAAC,kBAAA,CAAKL,WAAW,IAAEM,cAAc,EAAC,CAAC;MAChDpB,UAAU,CAACsB,QAAQ,CAAC,SAAS,EAAE;QAAErB,IAAI,EAAJA,IAAI;QAAEa,WAAW,EAAXA;MAAY,CAAC,CAAC;IACvD;EACF,CAAC;EAED,IAAMS,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIC,KAAK,EAAK;IACvC,IAAMC,kBAAkB,GAAAN,kBAAA,CAAOT,eAAe,CAAC;IAC/C,IAAMgB,WAAW,GAAGD,kBAAkB,CAACE,OAAO,CAACH,KAAK,CAAC;IACrD,IAAIE,WAAW,KAAK,CAAC,CAAC,EAAE;MACtBD,kBAAkB,CAACG,MAAM,CAACF,WAAW,EAAE,CAAC,CAAC;IAC3C,CAAC,MAAM;MACLD,kBAAkB,CAACI,IAAI,CAACL,KAAK,CAAC;IAChC;IACAb,kBAAkB,CAACc,kBAAkB,CAAC;EACxC,CAAC;EAED,IAAAK,kBAAA,GAAkC7B,IAAI,CAACK,YAAY,CAAC;IAA5CyB,MAAM,GAAAD,kBAAA,CAANC,MAAM;IAAEC,IAAI,GAAAF,kBAAA,CAAJE,IAAI;IAAEC,OAAO,GAAAH,kBAAA,CAAPG,OAAO;EAE7B,OACErC,OAAA,CAACL,IAAI;IAAA2C,QAAA,GACHtC,OAAA,CAACJ,IAAI;MAAA0C,QAAA,EAAEH;IAAM;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KAAO,CAAC,EACrB3C,OAAA,CAACF,WAAW;MACV8C,OAAO,EAAEjB,qBAAsB;MAC/BkB,aAAa,EAAErB,cAAe;MAC9BsB,OAAO,EAAET,OAAQ;MACjBU,cAAc,EAAE;QAAEC,MAAM,EAAE;MAAI,CAAE;MAChCC,MAAM,EAAC;IAAS;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KACjB,CAAC,EACF3C,OAAA,CAACH,MAAM;MAACqD,KAAK,EAAC,eAAe;MAACN,OAAO,EAAExB,kBAAmB;MAAC6B,MAAM,EAAC;IAAe;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KAAE,CAAC;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,GAAAC,KAChF,CAAC;AAEX,CAAC;AAED,eAAe1C,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}